openapi: 3.0.1
info:
  title: Purchasing service for service 'Get topics by text'
  description: |+
    Purchasing service for service 'Get topics by text'.

    If endpoint is protected by security component then it may returns 401,

    all endpoints may returns 500 (unhandled error).
  version: 1.0.0
servers:
  - url: 'http://dev.gtbt.api/api/v1'
    description: 'DEV API v1'
tags:
  - name: SignIn/SignUp
  - name: ApiRequest
  - name: Customer
  - name: Card
components:
  schemas:
    HttpError:
      required:
        - type
        - title
        - status
        - detail
        - instance
        - invalid_params
        - additional_params
      properties:
        type:
          type: string
          description: A URI reference [RFC3986] that identifies the problem type.
          example: https://tools.ietf.org/html/rfc2616#section-10
        title:
          type: string
          description: A short, human-readable summary of the problem type
          example: Error
        status:
          type: number
          description: The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
          example: 500
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
          example: Entity not found
        instance:
          type: string
          description: A URI reference that identifies the specific occurrence of the problem.  It may or may not yield further information if dereferenced.
          example: '/api/v1/articles/53'
        invalid_params:
          type: object
          example: { 'password': [ 'Password must be contains [...] symbols', 'Password must be longer than [...] symbols' ] }
          description: Associative array, where key - parameter in which some error, value - strings array with error messages
        additional_params:
          type: object
          description: Associative array, where key - parameter in which some error, value - any
          example: { 'offered_emails': [ 'example@example.net', 'example@example.com' ] }
    AuthorizationToken:
      type: string
      example: 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvdXNlcnNcL2xvZ2luIiwiaWF0IjoxNjAwODU4Nzg4LCJleHAiOjE2MDA4NjIzODgsIm5iZiI6MTYwMDg1ODc4OCwianRpIjoiV3NleVhUTXNJUkU5ODczWiIsInN1YiI6MywicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.mJpw-nBGcVsOuAslPuy9qD3R3sTyh7_vjh5ci4QpjQk'
    Uuid:
      type: string
      format: uuid
      example: '4e927af3-4ccb-4a3c-bdf0-f8a4e62c87f4'
    DateTimeIso8601:
      type: string
      format: date-time
      example: '2021-03-31T02:35:22+00:00'
    ApiRequestReadModel:
      required:
        - id
        - subscription_id
        - called_at
        - content
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        subscription_id:
          $ref: '#/components/schemas/Uuid'
        called_at:
          $ref: '#/components/schemas/DateTimeIso8601'
        content:
          type: object
          description: "json decoded object (text:string)"
    PlanReadModel:
      required:
        - id
        - is_active
        - title
        - amount
        - description
        - limits
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        is_active:
          type: boolean
        title:
          type: string
        amount:
          type: integer
        description:
          type: string
          nullable: true
        limits:
          type: array
          items:
            $ref: '#/components/schemas/PlanRestrictionReadModel'
    PlanRestrictionReadModel:
      required:
        - id
        - limit
        - period
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        limit:
          type: integer
          description: Qty of requests to service TPS
        period:
          type: integer
          description: Qty of days
    Customer:
      required:
        - id
        - email
        - created_at
        - is_active
        - subscriptions
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        email:
          type: string
          format: email
        created_at:
          $ref: '#/components/schemas/DateTimeIso8601'
        is_active:
          type: boolean
        subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/Subscription'
    Subscription:
      required:
        - id
        - created_at
        - expired_at
        - status
        - plan
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        created_at:
          $ref: '#/components/schemas/DateTimeIso8601'
        expired_at:
          $ref: '#/components/schemas/DateTimeIso8601'
        status:
          $ref: '#/components/schemas/SubscriptionStatus'
        plan:
          $ref: '#/components/schemas/PlanReadModel'
    SubscriptionStatus:
      required:
        - id
        - title
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        title:
          type: string
          description: slug
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedErrorResponse:
      description: Need to HTTP authentificate.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/HttpError'
    AccessDeniedErrorResponse:
      description: User have not acces to the resource (resource is not secret).
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/HttpError'
    NotFoundErrorResponse:
      description: Requested resource is not exist or is secret
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/HttpError'
    ValidationErrorResponse:
      description: Validation failed. The "invalid_params" property contains error information.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/HttpError'
    ServerError:
      description: Internal server error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/HttpError'
paths:
  /login:
    post:
      tags:
        - SignIn/SignUp
      summary: Login
      requestBody:
        content:
          application/json:
            schema:
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationToken'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        422:
          $ref: '#/components/responses/ValidationErrorResponse'
  /register:
    post:
      tags:
        - SignIn/SignUp
      summary: Registration
      requestBody:
        content:
          application/json:
            schema:
              required:
                - username
                - password
                - timezone
              properties:
                username:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                timezone:
                  type: string
                  example: 'Asia/Omsk'
      responses:
        204:
          description: Ok. User should confirm  its email
  /tps_api_requests:
    post:
      tags:
        - ApiRequest
      summary: Add ApiRequest
      parameters:
        - in: header
          name: tps-public-id
          required: true
          schema:
            type: string
        - in: header
          name: tps-secret
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - text
              properties:
                text:
                  type: string
      responses:
        204:
          description: Ok.
        403:
          $ref: '#/components/responses/AccessDeniedErrorResponse'
    get:
      tags:
        - ApiRequest
      summary: List API Reqiests
      parameters:
        - in: query
          name: limit
          schema:
            type: string
            format: int32
            default: "20"
        - in: query
          name: page
          schema:
            type: string
            format: int32
            default: "1"
        - in: query
          name: subscription_id
          schema:
            type: string
            format: uuid
        - in: query
          name: date_min
          schema:
            type: string
            description: min called_at, ISO 8601
            format: date-time
        - in: query
          name: date_max
          schema:
            type: string
            description: max called_at, ISO 8601
            format: date-time
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                required:
                  - data
                  - qty
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApiRequestReadModel'
                  qty:
                    type: integer
        403:
          $ref: '#/components/responses/AccessDeniedErrorResponse'
  /plans:
    get:
      tags:
        - Plan
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlanReadModel'
    post:
      tags:
        - Plan
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              required:
                - is_active
                - title
                - amount
                - description
                - limits
              properties:
                is_active:
                  type: boolean
                title:
                  type: string
                amount:
                  type: integer
                description:
                  type: string
                  nullable: true
      responses:
        201:
          description: Ok, created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanReadModel'
        422:
          $ref: '#/components/responses/ValidationErrorResponse'
  /plans/{planId}:
    get:
      tags:
        - Plan
      parameters:
        - in: path
          name: planId
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanReadModel'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
    put:
      tags:
        - Plan
      parameters:
        - in: path
          name: planId
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              required:
                - is_active
                - title
                - amount
                - description
                - limits
              properties:
                is_active:
                  type: boolean
                title:
                  type: string
                amount:
                  type: integer
                description:
                  type: string
                  nullable: true
                limits:
                  type: array
                  items:
                    $ref: '#/components/schemas/PlanRestrictionReadModel'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanReadModel'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
        422:
          $ref: '#/components/responses/ValidationErrorResponse'
  /customers:
    get:
      tags:
        - Customer
      summary: Customers pagination
      parameters:
        - in: query
          name: limit
          schema:
            type: string
            format: int32
            default: "20"
        - in: query
          name: page
          schema:
            type: string
            format: int32
            minimum: 1
            default: "1"
        - in: query
          name: user_active_statuses
          description: array of (0,1), where 1 - is active, 0 -is not active
          schema:
            type: array
            items:
              type: string
              format: boolean
        - in: query
          name: subscription_statuses
          description: subscription statuses ids
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Uuid'
        - in: query
          name: email
          description: search by email (substr)
          schema:
            type: string
            format: email
        - in: query
          name: plans
          description: plans ids
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Uuid'
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                required:
                  - data
                  - qty
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Customer'
                  qty:
                    type: integer
        403:
          $ref: '#/components/responses/AccessDeniedErrorResponse'
  /customers/{customerId}:
    get:
      tags:
        - Customer
      summary: Customer detail
      parameters:
        - in: path
          required: true
          name: customerId
          schema:
            $ref: '#/components/schemas/Uuid'
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
  /cards:
    post:
      tags:
        - Card
      summary: Add a card
      requestBody:
        content:
          application/json:
            schema:
              description: https://developers.cloudpayments.ru/#ustanovka
              required:
                - card_number
                - exp_date_month
                - exp_date_year
                - cvv
                - name
                - cryptogram
              properties:
                card_number:
                  type: string
                exp_date_month:
                  type: string
                exp_date_year:
                  type: string
                cvv:
                  type: string
                name:
                  type: string
                cryptogram:
                  type: string
      security:
        - bearerAuth: [ ]
      responses:
        201:
          description: Ok.
          content:
            application/json:
              schema:
                required:
                  - id
                properties:
                  id:
                    $ref: '#/components/schemas/Uuid'
        412:
          description: Init 3D secure procedure
          content:
            application/json:
              schema:
                required:
                  - uri
                properties:
                  uri:
                    type: string
                    description: Need confirm 3Ds
        403:
          $ref: '#/components/responses/AccessDeniedErrorResponse'

openapi: 3.0.1
info:
  title: Purchasing service for service 'Get topics by text'
  description: |+
    Purchasing service for service 'Get topics by text'.

    If endpoint is protected by security component then it may returns 401,

    all endpoints may returns 500 (unhandled error).
  version: 1.0.0
servers:
  - url: 'http://dev.gtbt.api/api/v1'
    description: 'DEV API v1'
tags:
  - name: SignIn/SignUp
components:
  schemas:
    HttpError:
      required:
        - type
        - title
        - status
        - detail
        - instance
        - invalid_params
        - additional_params
      properties:
        type:
          type: string
          description: A URI reference [RFC3986] that identifies the problem type.
          example: https://tools.ietf.org/html/rfc2616#section-10
        title:
          type: string
          description: A short, human-readable summary of the problem type
          example: Error
        status:
          type: number
          description: The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
          example: 500
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
          example: Entity not found
        instance:
          type: string
          description: A URI reference that identifies the specific occurrence of the problem.  It may or may not yield further information if dereferenced.
          example: '/api/v1/articles/53'
        invalid_params:
          type: object
          example: { 'password': [ 'Password must be contains [...] symbols', 'Password must be longer than [...] symbols' ] }
          description: Associative array, where key - parameter in which some error, value - strings array with error messages
        additional_params:
          type: object
          description: Associative array, where key - parameter in which some error, value - any
          example: { 'offered_emails': [ 'example@example.net', 'example@example.com' ] }
    AuthorizationToken:
      type: string
      example: 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvdXNlcnNcL2xvZ2luIiwiaWF0IjoxNjAwODU4Nzg4LCJleHAiOjE2MDA4NjIzODgsIm5iZiI6MTYwMDg1ODc4OCwianRpIjoiV3NleVhUTXNJUkU5ODczWiIsInN1YiI6MywicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.mJpw-nBGcVsOuAslPuy9qD3R3sTyh7_vjh5ci4QpjQk'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedErrorResponse:
      description: Need to HTTP authentificate.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/HttpError'
    AccessDeniedErrorResponse:
      description: User have not acces to the resource (resource is not secret).
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/HttpError'
    NotFoundErrorResponse:
      description: Requested resource is not exist or is secret
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/HttpError'
    ValidationErrorResponse:
      description: Validation failed. The "invalid_params" property contains error information.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/HttpError'
    ServerError:
      description: Internal server error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/HttpError'
paths:
  /login:
    post:
      tags:
        - SignIn/SignUp
      summary: Login
      requestBody:
        content:
          application/json:
            schema:
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationToken'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        422:
          $ref: '#/components/responses/ValidationErrorResponse'
  /register:
    post:
      tags:
        - SignIn/SignUp
      summary: Registration
      requestBody:
        content:
          application/json:
            schema:
              required:
                - username
                - password
                - timezone
              properties:
                username:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                timezone:
                  type: string
                  example: 'Asia/Omsk'
      responses:
        204:
          description: Ok. User should confirm  its email
